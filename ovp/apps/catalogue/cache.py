from django.core.cache import cache
from ovp.apps.catalogue.models import Catalogue
from ovp.apps.projects.models import Project

from collections import OrderedDict

def get_catalogue(channel, slug):
  """
  Generates and caches a dictionary containing information about
  a given catalogue. This does not query the database to fetch
  the projects for a given catalog, it should be passed to evaluate_catalogue
  for that.
  """
  key = "catalogue-{}-{}".format(channel, slug)
  cache_ttl = 60
  result = cache.get(key)

  if not result:
    try:
      catalogue = Catalogue.objects.prefetch_related("sections", "sections__filters").get(slug=slug, channel__name=channel)
    except Catalogue.DoesNotExist:
      result = None
    else:
      result = {
        "name": catalogue.name,
        "slug": catalogue.slug,
        "fetched": False,
        "sections": [],
      }

      for section in catalogue.sections.all():
        section_dict = {
          "name": section.name,
          "slug": section.slug,
          "amount": section.amount,
          "filters": {}
        }
        for section_filter in section.filters.all():
          section_dict["filters"] = section_filter.filter.get_filter_kwargs()

        result["sections"].append(section_dict)

    cache.set(key, result, cache_ttl)

  return result

def fetch_catalogue(catalogue_dict, serializer=None):
  """
  Fetchs a catalogue dict generated by get_catalogue()

  It removes the key "filters" and add the key "projects" to
  every section in the catalogue.

  The projects key added is a QuerySet. It can be serialized
  by passing a serializer argument.
  """
  base_queryset = Project.objects \
          .prefetch_related('skills', 'causes', 'categories', 'job__dates') \
          .select_related('address', 'owner', 'work', 'job') \
          .filter(published=True, deleted=False, closed=False) \
          .order_by('-pk')

  for i, section in enumerate(catalogue_dict["sections"]):
    qs = base_queryset.filter(**section["filters"])[:section["amount"]]
    del catalogue_dict["sections"][i]["filters"]

    if serializer:
      result = serializer(qs, many=True).data
    else:
      result = qs

    catalogue_dict["sections"][i]["projects"] = result

  catalogue_dict["fetched"] = True

  return catalogue_dict
